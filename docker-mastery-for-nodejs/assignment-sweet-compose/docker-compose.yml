version: '2.4'

services:
  redis:
    image: redis:alpine
    healthcheck:
            test: redis-cli ping
    networks:
      - frontend

  db:
    image: postgres:9.6
    healthcheck:
            test: pg_isready -U postgres -h 127.0.0.1
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - backend
  
  traefik:
          image: traefik:1.7-alpine
          volumes:
                - /var/run/docker.sock:/var/run/docker.sock  
          ports: 
                - "80:80"
          command:
                - --docker
                - --docker.domain=traefik
                - --docker.watch
                - --api
                - --defaultentrypoints=http,https
          labels:
                - traefik.port=8080
                - traefik.frontend.rule=Host:traefik.localhost
          networks:
                - backend
                - frontend

  vote:
    image: bretfisher/examplevotingapp_vote
    depends_on:
        redis:
                condition: service_healthy
    ports:
      - '5000:80'
    networks:
      - frontend
    labels:
      - traefik.port=80
      - traefik.frontend.rule=Host:vote.localhost

  result:
    build: 
      context: result
    command: /node/node_modules/.bin/nodemon server.js --inspect=0.0.0.0:9229 ./result/server.js
    # command: nodemon --inspect=0.0.0.0:9229 server.js 
    depends_on:
            db:
                 condition: service_healthy  
    volumes:
        # - ./result:/var/lib/result/app
        # i could also simply write this
       - ./result:/node/app
    ports:
      - '5001:80'
      - '9229:9229' # that s for debugging
    environment:
      - NODE_ENV=development
    networks:
      - backend
    labels:
      - traefik.port=80
      - traefik.frontend.rule=Host:result.localhost

  worker:
    image: bretfisher/examplevotingapp_worker:java
    depends_on:
            db:
                    condition: service_healthy
            redis:
                    condition: service_healthy
    networks:
      - frontend
      - backend

networks:
    frontend:
    backend:

volumes:
    db-data:

